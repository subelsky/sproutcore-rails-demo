NOTE: Firebug or webkit inspector

rails -v # 2.3.2
sproutcore -v # 0.9.23
sudo gem install sqlite3-ruby --no-ri --no-rdoc

rails cookbook
cd cookbook
rake db:create:all
script/server
visit http://localhost:3000/

script/generate resource recipe name:string prep_time:integer cook_time:integer

replace recipes.yml with
  one:
    name: "Macaroni and Cheese"
    prep_time: 5
    cook_time: 10

  two:
    name: "Duck l'Orange"
    prep_time: 30
    cook_time: 2400

rake db:create db:migrate db:fixtures:load   

mkdir app/presenters

create app/presenters/recipe_presenter.rb

	class RecipePresenter
  
	  def initialize(params = {})
	  end

	  def to_hash
	    { :records => records, :ids => recipe_ids }
	  end

	  private

	  def recipes
	    @recipes ||= Recipe.find(:all)
	  end

	  def recipe_ids
	    @recipe_ids ||= recipes.collect { |r| r.id }
	  end
  
	  def records
	    unless @records
	      @records = recipes.map do |recipe|
	        recipe.attributes.merge(:guid => recipe.id, :type => "Recipe")
	      end
	    end
	    return @records
	  end
  
	end

in the config block for environment.rb
	  config.load_paths << "#{RAILS_ROOT}/app/presenters"

Open console
	type RecipePresenter.new.to_hash
	
Add to recipes controller:

  def index
    render :text => RecipePresenter.new.to_hash.to_json
  end

restart server

visit http://localhost:3000/recipes

sc-init cookbook
cd cookbook
sc-server

in browser check http://localhost:4020/cookbook

sc-gen model cookbook/recipe

add to fixtures/recipe.js

  { guid: 1,
    name: "Nachos",
    type: 'Recipe',
    prepTime: 3,
    cookTime: 1
    },
  
  { guid: 2,
    name: "Vegetable Korma",
    type: 'Recipe',
    prepTime: 45,
    cookTime: 35
    }

reload browser
Cookbook.Recipe.find(1).get('name')
Cookbook.Recipe.find(2).get('name')

change core.js
  server: SC.RailsServer.create({ prefix: ['Cookbook'] }),

add to core.js
  localMode: window.location.hash === '#development',

add to recipe model

  dataSource: Cookbook.server,
  resourceURL: 'sc/recipes'

change main.js
	
  if (Cookbook.localMode) {
    Cookbook.server.preload(Cookbook.FIXTURES) ;
  } else {
    Cookbook.server.listFor({ recordType: Cookbook.Recipe });
  }

add to sc-config
	proxy '/sc', :url => "", :to => 'localhost:3000'

restart sc-server

check the SC logs and the Rails server logs

then at the consle type
Cookbook.Recipe.findAll().inspect()
Cookbook.Recipe.find(####).get('name')
Cookbook.Recipe.find(####).get('name')

sc-gen controller cookbook/recipes SC.CollectionController

talk about collection controller vs array controller vs obj controller

add to main.js
  var recipes = Cookbook.Recipe.collection({ orderBy: ['name'] });
  Cookbook.recipesController.set('content',recipes);
  recipes.refresh();

talk about collection object

reload browser in localMode and normal mode, then
Cookbook.recipeMasterController.get('arrangedObjects').inspect()

change body.html
	<% content_for('body') do %>
	  <% view :sidebar do -%>
	    <%= list_view :recipes, 
	        :row_height => 20,
	        :content_value_key => 'name', 
	        :bind => { :content => 'Cookbook.recipesController.arrangedObjects', 
	                   :selection => 'Cookbook.recipesController.selection' }  %>
	  <% end -%>
	<% end %>

reload browser
  nothing displayed WTF?
  talk about absolute positioning

paste in body.css

reload browser in localMode and normal mode and make sure list displays
	- select an objects then type
	Cookbook.recipesController.get('selection').inspect() 

  - select multiple objects and type
  
- talk about row_height, content_value_key, bind

then add to recipes.js
  allowsEmptySelection: false,
  allowsMultipleSelection: false

reload browser and test effects

sc-gen controller cookbook/recipe SC.ObjectController

add to recipe.js controller
  contentBinding: 'Cookbook.recipesController.selection'

add after sidebar:

  <% view :main do -%>
  	<div class='row'>
  		<label>Name</label>
      <%= text_field_view :bind => { :value => 'Cookbook.recipeController.name' } %>
  	</div>

  	<div class='row'>
  	  <label>Prep Time</label>
      <%= text_field_view :bind => { :value => 'Cookbook.recipeController.prepTime' } %>
  	</div>

  	<div class='row'>
  	  <label>Cook Time</label>
      <%= text_field_view :bind => { :value => 'Cookbook.recipeController.cookTime' } %>
  	</div>
  <% end -%>

- note camel case of properties
- reload browser, click around
- change the name property, see it change "real time"
- append :size => 4 to helpers

- add to recipe.js controller
  commitChangesImmediately: false

- reload and note how changes don't persist when click away

- then add inside main view:

  	<% view :toolbar do -%> 
  		<%= button_view :label => "Save", 
                			:default => true,
                      :action => 'Cookbook.recipeController.commitChanges',
                      :bind => {
                        :enabled => "Cookbook.recipeController.hasChanges"
                      }  %>

  	<% end -%>

- reload and see how changes do persist

- but notice nothing going to server

- add this to recipe controller:

  commitRecord: function() {
    var content = this.get('content');
    if (content && content.get('length') == 1) {
      content.objectAt(0).commit();
    }
    this.commitChanges();
  }

- change save button to this action 
	Cookbook.recipeController.commitRecord

- reload, notice that properties aren't being sent



- ADD PROPERTIES TO RECIPE SO SAVE WORKS

- cancel button
	MochiContacts.detailController.discardChanges',

- hasMany ingredients
- custom view
- app page title
- don't allow nil selection, & allow multiple selection
- Rails auth token
- computed property for time display 
- unit tests
- reorder content (at least show it)
- load screen

- array controller instead of coll controller
	http://groups.google.com/group/sproutcore/browse_thread/thread/aa557bc6e357f418/d88c301a040fd6ef?lnk=gst&q=collection#d88c301a040fd6ef