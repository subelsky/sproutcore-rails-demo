NOTE: Firebug or webkit inspector

rails -v # 2.3.2
sproutcore -v # 0.9.23
sudo gem install sqlite3-ruby --no-ri --no-rdoc

rails cookbook
cd cookbook
rake db:create:all
script/server
visit http://localhost:3000/

script/generate resource recipe name:string prep_time:integer cook_time:integer

replace recipes.yml with
  one:
    name: "Macaroni and Cheese"
    prep_time: 5
    cook_time: 10

  two:
    name: "Duck l'Orange"
    prep_time: 30
    cook_time: 2400

rake db:create db:migrate db:fixtures:load   

mkdir app/presenters

create app/presenters/recipe_presenter.rb

	class RecipePresenter
  
	  def initialize(params = {})
	  end

	  def to_hash
	    { :records => records, :ids => recipe_ids }
	  end

	  private

	  def recipes
	    @recipes ||= Recipe.find(:all)
	  end

	  def recipe_ids
	    @recipe_ids ||= recipes.collect { |r| r.id }
	  end
  
	  def records
	    unless @records
	      @records = recipes.map do |recipe|
	        recipe.attributes.merge(:guid => recipe.id, :type => "Recipe")
	      end
	    end
	    return @records
	  end
  
	end

in the config block for environment.rb
	  config.load_paths << "#{RAILS_ROOT}/app/presenters"

Open console
	type RecipePresenter.new.to_hash
	
Add to recipes controller:

  def index
    render :text => RecipePresenter.new.to_hash.to_json
  end

restart server

visit http://localhost:3000/recipes

sc-init cookbook
cd cookbook
sc-server

in browser check http://localhost:4020/cookbook

sc-gen model cookbook/recipe

add to fixtures/recipe.js

  { guid: 1,
    name: "Nachos",
    type: 'Recipe',
    prepTime: 3,
    cookTime: 1
    },
  
  { guid: 2,
    name: "Vegetable Korma",
    type: 'Recipe',
    prepTime: 45,
    cookTime: 35
    }

add to main.js
	
  Cookbook.server.preload(Cookbook.FIXTURES) ;

reload browser
Cookbook.Recipe.find(1).get('name')
Cookbook.Recipe.find(2).get('name')

- now let's hook it up to server

add to core.js
	localMode = window.location.hash === '#development';

  localMode: localMode,
  server: SC.RailsServer.create({ prefix: ['Cookbook'] }),

change main.js

  if (Cookbook.localMode) {
    Cookbook.server.preload(Cookbook.FIXTURES) ;
  } else {
    Cookbook.server.listFor({ recordType: Cookbook.Recipe });
  }

add to recipe model

  resourceURL: 'sc/recipes'

add to sc-config
	proxy '/sc', :url => "", :to => 'localhost:3000'

restart sc-server

check the SC logs and the Rails server logs

then at the consle type
Cookbook.Recipe.findAll().inspect()
Cookbook.Recipe.find(####).get('name')
Cookbook.Recipe.find(####).get('name')

sc-gen controller cookbook/recipes SC.ArrayController

talk about collection controller vs array controller vs obj controller

change main.js

  if (Cookbook.localMode) {
    Cookbook.server.preload(Cookbook.FIXTURES) ;
    Cookbook.startup();
  } else {
    Cookbook.server.listFor({ recordType: Cookbook.Recipe, callback: Cookbook.startup });
  }

create core_app.js

	Cookbook.startup = function() {
	  var recipes = Cookbook.Recipe.findAll();
	  Cookbook.recipesController.set('content',recipes);
	};

Cookbook.recipesController.get('arrangedObjects').inspect()

change body.html
	<% content_for('body') do %>
	  <% view :sidebar do -%>
	    <%= list_view :recipes, 
	        :row_height => 20,
	        :content_value_key => 'name', 
	        :bind => { :content => 'Cookbook.recipesController.arrangedObjects', 
	                   :selection => 'Cookbook.recipesController.selection' }  %>
	  <% end -%>
	<% end %>

reload browser
  nothing displayed WTF?
  talk about absolute positioning

paste in body.css
	<snip>
	
reload browser in localMode and normal mode and make sure list displays
	- select an objects then type
	Cookbook.recipesController.get('selection').inspect() 

  - select multiple objects and type
  
- talk about row_height, content_value_key, bind

then add to recipes.js
  allowsEmptySelection: false,
  allowsMultipleSelection: false

reload browser and test effects

sc-gen controller cookbook/recipe SC.ObjectController

add to recipe.js controller
  contentBinding: 'Cookbook.recipesController.selection'

add after sidebar:

  <% view :main do -%>
  	<div class='row'>
  		<label>Name</label>
      <%= text_field_view :bind => { :value => 'Cookbook.recipeController.name' } %>
  	</div>

  	<div class='row'>
  	  <label>Prep Time</label>
      <%= text_field_view :bind => { :value => 'Cookbook.recipeController.prepTime' } %>
  	</div>

  	<div class='row'>
  	  <label>Cook Time</label>
      <%= text_field_view :bind => { :value => 'Cookbook.recipeController.cookTime' } %>
  	</div>
  <% end -%>

- note camel case of properties
- reload browser, click around
- change the name property, see it change "real time"
- append :size => 4 to helpers

- add to recipe.js controller
  commitChangesImmediately: false

- reload and note how changes don't persist when click away

- then add inside main view:

  	<% view :toolbar do -%> 
  		<%= button_view :label => "Save", 
                			:default => true,
                      :action => 'Cookbook.recipeController.commitChanges',
                      :bind => {
                        :enabled => "Cookbook.recipeController.hasChanges"
                      }  %>

  	<% end -%>

- reload and see how changes do persist

- but notice nothing going to server

- add this to recipe controller:

  commitRecord: function() {
    var content = this.get('content');
    if (content && content.get('length') == 1) {
      content.objectAt(0).commit();
    }
    this.commitChanges();
  }

- change save button to this action 
	Cookbook.recipeController.commitRecord

- reload, notice that properties aren't being sent

- add to recipe.js
  properties: ['name','prepTime','cookTime']
	but sends everything, that's a bug

- BUG FIX/WORKAROUND FOR URL ENCODING STEP GOES HERE

- add cancel button

	<%= button_view :label => "Cancel", 
	                :action => 'Cookbook.recipeController.discardChanges', :bind => {
	                    :enabled => "Cookbook.recipeController.hasChanges"
	                  } %>

- reload and try it

- then add this to cancel
  		                :cancel => true,

- reload and try it

- type this at console
	Cookbook.recipesController.newObject({ name: "Quiche Lorraine" })

- why didn't it show up?  need to add this to recipes controller:

  canEditCollection: true

- SWITCH TO ARRAY CONTROLLER EXPLANATION?
	change main.js
	switch to recipesController
	"smart query"  "expensive SC.collection"

- now let's add some buttons:

	- make room for buttons by changing #recipes_list_scroll height to 95%

	- add to body.rhtml
    <% view :sidebar_toolbar do -%>
  		<%= button_view :label => "+", :action => 'Cookbook.recipesController.addObject' %>
    <% end -%>

	- add to body.css
	
	#sidebar_toolbar {
	  position: absolute;
	  top:  95%;
	  left:  0px;
	  width: 200px;
	  height: 5%;
	}

- add to recipe.js for default values

  init: function() {
    this.set('name','New Recipe');
    this.set('dataSource',Cookbook.server); // since we are not using collections, this doesn't get set automatically
    sc_super();
  }

- add to recipesController

  addObject: function() {
    var newObj = Cookbook.Recipe.newRecord({},Cookbook.server);
    this.pushObject(newObj);
    this.set('selection',[newObj]);
  }

- add to recipeController

  saveable: function() {
    
    if (this.get('hasChanges')) { 
      return true;
    }
    
    var content = this.get('content');
    var save = false;

    if (content && content.get('length') == 1) {
      save = content.objectAt(0).get('newRecord');
    } 
    
    return save;
  }.property('hasChanges','content*newRecord')

- change save button to bind to "Cookbook.recipeController.saveable"

- try saving, check Rails server log

- add to application.rb

  def auth_token
    respond_to do |wants|
      wants.js do
        if protect_against_forgery?
          render :text => "var SC = SC || {};  
            SC.RAILS_AUTH_TOKEN_NAME = '#{request_forgery_protection_token}';
            SC.RAILS_AUTH_TOKEN = '#{form_authenticity_token}';"
        end
      end
    end
  end

- add to routes.rb

  map.connect 'auth-token.js', :controller => 'application', :action => 'auth_token'

- add to sc-config

  c[:javascript_libs] = ['/sc/auth-token.js']

- reload browser

- inspect source, you'll see the call to auth-token.js
	- this is a good place to do login checks too

- in console, type 
	SC.RAILS_AUTH_TOKEN

- now try to add, save

- validation crap?
- sorting?
- hasMany ingredients
- custom view
- app page title
- don't allow nil selection, & allow multiple selection
- Rails auth token
- computed property for time display 
- unit tests
- reorder content (at least show it)
- build tools
- SC 1.0 API diffs
- load screen

- array controller instead of coll controller
	http://groups.google.com/group/sproutcore/browse_thread/thread/aa557bc6e357f418/d88c301a040fd6ef?lnk=gst&q=collection#d88c301a040fd6ef